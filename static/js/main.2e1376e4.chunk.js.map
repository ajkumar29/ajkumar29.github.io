{"version":3,"sources":["components/button/neonButton.js","panels/home.js","App.js","serviceWorker.js","index.js"],"names":["NeonButton","props","children","id","color","useEffect","console","log","document","getElementById","style","setProperty","className","Home","typewriteList","el","getElementsByClassName","tick","loopCounter","repeatCounter","isDeleting","txt","htmlAdd","length","typewrite","fullTxts","componentStart","componentEnd","repeat","fullTxt","html","substring","innerHTML","delta","Math","random","setTimeout","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e1376e4.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\nimport './neonButton.css'\n\nexport default function NeonButton(props) {\n    const {children,id, color} = props\n\n    useEffect(() => {\n        console.log(props)\n        document.getElementById(`containerButton_${id}`).style.setProperty('--main-color', color)\n    }, [])\n    return (\n        <div className=\"containerButton\" id={`containerButton_${id}`}>\n            <a id=\"neonButton\">{children}</a>\n        </div>\n\n    )\n}","import React, {useEffect} from 'react'\nimport './home.css'\nimport NeonButton from \"../components/button/neonButton\";\nimport \"../../node_modules/@fortawesome/fontawesome-free/css/all.css\";\n\n\n\nexport default function Home({typewriteList}) {\n    const LINKEDIN_COLOUR_CODE = \"#2867B2\";\n    const GITHUB_COLOUR_CODE = \"#BD2C00\";\n    const EMAIL_COLOUR_CODE = \"#6CC644\";\n    const CV_COLOUR_CODE = \"#f6cd61\";\n\n    const tick = (\n        typewriteList,\n        el,\n        loopCounter = 0,\n        repeatCounter = 0,\n        isDeleting = false,\n        txt = \"\",\n        htmlAdd = \"\"\n      ) => {\n        if (loopCounter < typewriteList.length) {\n        const typewrite = typewriteList[loopCounter];\n          const { fullTxts, componentStart, componentEnd, repeat } = typewrite;\n          const fullTxt = fullTxts[repeatCounter % fullTxts.length];\n          if (isDeleting) {\n            txt = fullTxt.substring(0, txt.length - 1);\n          } else {\n            txt = fullTxt.substring(0, txt.length + 1);\n          }\n          const html = '<span class=\"line-1 anim-typewriter\">' + txt + \"</span>\";\n    \n          el.innerHTML = htmlAdd + componentStart + html + componentEnd;\n    \n          var delta = 200 - Math.random() * 100;\n    \n          if (isDeleting) {\n            delta /= 2;\n          }\n    \n          if (!isDeleting && txt === fullTxt) {\n            if (repeat) {\n              delta = 2000;\n              isDeleting = true;\n            } else {\n              loopCounter++;\n              htmlAdd += componentStart + fullTxt + componentEnd;\n              txt = \"\";\n            }\n          } else if (isDeleting && txt === \"\") {\n            if (repeat) {\n              repeatCounter++;\n            }\n            isDeleting = false;\n          }\n          setTimeout(function () {\n            console.log(delta);\n            tick(\n              typewriteList,\n              el,\n              loopCounter,\n              repeatCounter,\n              isDeleting,\n              txt,\n              htmlAdd\n            );\n          }, delta)\n        }};\n    \n      useEffect(() => {\n        const el = document.getElementsByClassName(\"typewrite\")[0];\n        tick(typewriteList, el);\n      }, []);\n      \n    return (\n        <div className=\"content\">\n          <div className=\"typewrite\"></div>\n          <div className=\"buttons\">\n            <NeonButton id={\"linkedin\"} color={LINKEDIN_COLOUR_CODE}>\n              <i className=\"fab fa-linkedin-in\"></i>\n              <span className=\"logoText\"> LinkedIn</span>\n            </NeonButton>\n            <NeonButton id={\"github\"} color={GITHUB_COLOUR_CODE}>\n              <i className=\"fab fa-github\"></i>\n              <span className=\"logoText\"> GitHub</span>\n            </NeonButton>\n            <NeonButton id={\"email\"} color={EMAIL_COLOUR_CODE}>\n              <i className=\"far fa-envelope\"></i>\n              <span className=\"logoText\"> Email</span>\n            </NeonButton>\n          </div>\n          <div className=\"cvButton\">\n            <NeonButton id={\"cv\"} color={CV_COLOUR_CODE}>\n              <i className=\"far fa-file\"></i> Download My CV\n            </NeonButton>\n          </div>\n        </div>\n    )\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./panels/home\";\n\nfunction App() {\n  const typewriteList = [\n    {\n      fullTxts: [\"Hello World, \"],\n      componentStart: \"<h2>\",\n      componentEnd: \"</h2>\",\n      repeat: false,\n    },\n    {\n      fullTxts: [\"I'm \"],\n      componentStart: \"<h2>\",\n      componentEnd: \"\",\n      repeat: false,\n    },\n    {\n      fullTxts: [\"AJ Kumar\"],\n      componentStart: \"<span id='name'>\",\n      componentEnd: \"</span></h2>\",\n      repeat: false,\n    },\n    {\n      fullTxts: [\"I'm a \"],\n      componentStart: \"<h2>\",\n      componentEnd: \"\",\n      repeat: false,\n    },\n    {\n      fullTxts: [\"Software Engineer\", \"Web Developer\"],\n      componentStart: \"\",\n      componentEnd: \"</h2>\",\n      repeat: true,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <section className=\"home\">\n        <Home typewriteList={typewriteList} />\n      </section>\n\n      <section className=\"About\"></section>\n\n      <section className=\"Projects\"></section>\n\n      <section className=\"Contact me\"></section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}