{"version":3,"sources":["components/button/neonButton.js","panels/home.js","components/contactForm/contact.js","App.js","serviceWorker.js","index.js"],"names":["NeonButton","props","children","id","color","onClick","useEffect","document","getElementById","style","setProperty","className","Home","typewriteList","contactMeRef","el","getElementsByClassName","tick","loopCounter","repeatCounter","isDeleting","txt","htmlAdd","length","typewrite","fullTxts","componentStart","componentEnd","repeat","fullTxt","html","substring","innerHTML","delta","Math","random","setTimeout","console","log","ref","window","scrollTo","left","top","current","offsetTop","behavior","Contact","type","name","required","App","useRef","Fragment","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c49b7c4.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./neonButton.css\";\n\nexport default function NeonButton(props) {\n  const { children, id, color, onClick } = props;\n\n  useEffect(() => {\n    document\n      .getElementById(`containerButton_${id}`)\n      .style.setProperty(\"--main-color\", color);\n  }, []);\n  return (\n    <div className=\"containerButton\" id={`containerButton_${id}`}>\n      <a id=\"neonButton\" onClick={onClick}>\n        {children}\n      </a>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport \"./home.css\";\nimport NeonButton from \"../components/button/neonButton\";\nimport \"../../node_modules/@fortawesome/fontawesome-free/css/all.css\";\n\nexport default function Home({ typewriteList, contactMeRef }) {\n  const LINKEDIN_COLOUR_CODE = \"#2867B2\";\n  const GITHUB_COLOUR_CODE = \"#BD2C00\";\n  const EMAIL_COLOUR_CODE = \"#6CC644\";\n  const CV_COLOUR_CODE = \"#F6CD61\";\n\n  const scrollToRef = (ref) =>\n    window.scrollTo({\n      left: 0,\n      top: ref.current.offsetTop,\n      behavior: \"smooth\",\n    });\n\n  const tick = (\n    typewriteList,\n    el,\n    loopCounter = 0,\n    repeatCounter = 0,\n    isDeleting = false,\n    txt = \"\",\n    htmlAdd = \"\"\n  ) => {\n    if (loopCounter < typewriteList.length) {\n      const typewrite = typewriteList[loopCounter];\n      const { fullTxts, componentStart, componentEnd, repeat } = typewrite;\n      const fullTxt = fullTxts[repeatCounter % fullTxts.length];\n      if (isDeleting) {\n        txt = fullTxt.substring(0, txt.length - 1);\n      } else {\n        txt = fullTxt.substring(0, txt.length + 1);\n      }\n      const html = '<span class=\"line-1 anim-typewriter\">' + txt + \"</span>\";\n\n      el.innerHTML = htmlAdd + componentStart + html + componentEnd;\n\n      var delta = 200 - Math.random() * 100;\n\n      if (isDeleting) {\n        delta /= 2;\n      }\n\n      if (!isDeleting && txt === fullTxt) {\n        if (repeat) {\n          delta = 2000;\n          isDeleting = true;\n        } else {\n          loopCounter++;\n          htmlAdd += componentStart + fullTxt + componentEnd;\n          txt = \"\";\n        }\n      } else if (isDeleting && txt === \"\") {\n        if (repeat) {\n          repeatCounter++;\n        }\n        isDeleting = false;\n      }\n      setTimeout(function () {\n        console.log(delta);\n        tick(\n          typewriteList,\n          el,\n          loopCounter,\n          repeatCounter,\n          isDeleting,\n          txt,\n          htmlAdd\n        );\n      }, delta);\n    }\n  };\n\n  useEffect(() => {\n    const el = document.getElementsByClassName(\"typewrite\")[0];\n    tick(typewriteList, el);\n  }, []);\n\n  return (\n    <div className=\"content\">\n      <div className=\"typewrite\"></div>\n      <div className=\"buttons\">\n        <NeonButton id={\"linkedin\"} color={LINKEDIN_COLOUR_CODE}>\n          <i className=\"fab fa-linkedin-in\"></i>\n          <span className=\"logoText\"> LinkedIn</span>\n        </NeonButton>\n        <NeonButton id={\"github\"} color={GITHUB_COLOUR_CODE}>\n          <i className=\"fab fa-github\"></i>\n          <span className=\"logoText\"> GitHub</span>\n        </NeonButton>\n        <NeonButton\n          id={\"email\"}\n          color={EMAIL_COLOUR_CODE}\n          onClick={() => scrollToRef(contactMeRef)}\n        >\n          <i className=\"far fa-envelope\"></i>\n          <span className=\"logoText\"> Email</span>\n        </NeonButton>\n      </div>\n      <div className=\"cvButton\">\n        <NeonButton id={\"cv\"} color={CV_COLOUR_CODE}>\n          <span className=\"logoText\">\n            <i className=\"far fa-file\"></i> Download My{\" \"}\n          </span>\n          CV\n        </NeonButton>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./contact.css\";\n\nimport NeonButton from \"../button/neonButton\";\n\nexport default function Contact() {\n  return (\n    <div id=\"contactContainer\">\n      <h2>Contact Me</h2>\n      <div className=\"row100\">\n        <div className=\"col\">\n          <div className=\"inputBox\">\n            <input type=\"text\" name=\"\" required=\"required\" />\n            <span className=\"text\">First Name</span>\n            <span className=\"line\"></span>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"inputBox\">\n            <input type=\"text\" name=\"\" required=\"required\" />\n            <span className=\"text\">Last Name</span>\n            <span className=\"line\"></span>\n          </div>\n        </div>\n      </div>\n      <div className=\"row100\">\n        <div className=\"col\">\n          <div className=\"inputBox\">\n            <input type=\"text\" name=\"\" required=\"required\" />\n            <span className=\"text\">Email</span>\n            <span className=\"line\"></span>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"inputBox\">\n            <input type=\"text\" name=\"\" required=\"required\" />\n            <span className=\"text\">Mobile</span>\n            <span className=\"line\"></span>\n          </div>\n        </div>\n      </div>\n      <div className=\"row100\">\n        <div className=\"col\">\n          <div className=\"inputBox textarea\">\n            <textarea required=\"required\" />\n            <span className=\"text\">Type your message here</span>\n            <span className=\"line\"></span>\n          </div>\n        </div>\n      </div>\n      <div className=\"row100\">\n        <div className=\"col\">\n          <div className=\"sendButton\">\n            <NeonButton color={\"#45f3ff\"}>Send</NeonButton>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useRef } from \"react\";\nimport \"./App.css\";\n\nimport Home from \"./panels/home\";\nimport Contact from \"./components/contactForm/contact\";\n\nfunction App() {\n  const typewriteList = [\n    {\n      fullTxts: [\"Hello World, \"],\n      componentStart: \"<h2>\",\n      componentEnd: \"</h2>\",\n      repeat: false,\n    },\n    {\n      fullTxts: [\"I'm \"],\n      componentStart: \"<h2>\",\n      componentEnd: \"\",\n      repeat: false,\n    },\n    {\n      fullTxts: [\"AJ Kumar\"],\n      componentStart: \"<span id='name'>\",\n      componentEnd: \"</span></h2>\",\n      repeat: false,\n    },\n    {\n      fullTxts: [\"I'm a\"],\n      componentStart: \"<h2>\",\n      componentEnd: \"\",\n      repeat: false,\n    },\n    {\n      fullTxts: [\" Web Developer\", \"n App Developer\", \" Software Engineer\"],\n      componentStart: \"\",\n      componentEnd: \"</h2>\",\n      repeat: true,\n    },\n  ];\n\n  const contactMeRef = useRef(null);\n\n  return (\n    <React.Fragment>\n      <section className=\"home\">\n        <Home typewriteList={typewriteList} contactMeRef={contactMeRef} />\n      </section>\n\n      <section className=\"About\"></section>\n\n      <section className=\"Projects\"></section>\n\n      <section className=\"Contact me\" ref={contactMeRef}>\n        <Contact />\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}